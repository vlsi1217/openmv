// This file was automatically generated by makeqstrdata.py

Q(__build_class__, (const byte*)"\x42\x88\x0f\x00" "__build_class__")
Q(__class__, (const byte*)"\x2b\xc5\x09\x00" "__class__")
Q(__doc__, (const byte*)"\x2d\xac\x07\x00" "__doc__")
Q(__import__, (const byte*)"\x38\x3e\x0a\x00" "__import__")
Q(__init__, (const byte*)"\x5f\xa5\x08\x00" "__init__")
Q(__locals__, (const byte*)"\x7b\x6a\x0a\x00" "__locals__")
Q(__main__, (const byte*)"\x8e\x13\x08\x00" "__main__")
Q(__module__, (const byte*)"\xff\x30\x0a\x00" "__module__")
Q(__name__, (const byte*)"\xe2\x38\x08\x00" "__name__")
Q(__next__, (const byte*)"\x02\x73\x08\x00" "__next__")
Q(__qualname__, (const byte*)"\x6b\x00\x0c\x00" "__qualname__")
Q(__repl_print__, (const byte*)"\x00\xbb\x0e\x00" "__repl_print__")
Q(__bool__, (const byte*)"\x2b\x65\x08\x00" "__bool__")
Q(__len__, (const byte*)"\xe2\xb0\x07\x00" "__len__")
Q(__getitem__, (const byte*)"\x26\x39\x0b\x00" "__getitem__")
Q(__setitem__, (const byte*)"\x32\x3e\x0b\x00" "__setitem__")
Q(__add__, (const byte*)"\xc4\x82\x07\x00" "__add__")
Q(__sub__, (const byte*)"\x21\x09\x07\x00" "__sub__")
Q(__repr__, (const byte*)"\x10\x0b\x08\x00" "__repr__")
Q(__str__, (const byte*)"\xd0\xcd\x07\x00" "__str__")
Q(micropython, (const byte*)"\x0b\x7c\x0b\x00" "micropython")
Q(byte_code, (const byte*)"\x9d\x04\x09\x00" "byte_code")
Q(native, (const byte*)"\x84\x0b\x06\x00" "native")
Q(viper, (const byte*)"\x5d\x23\x05\x00" "viper")
Q(asm_thumb, (const byte*)"\x43\x6d\x09\x00" "asm_thumb")
Q(Ellipsis, (const byte*)"\xf0\xe0\x08\x00" "Ellipsis")
Q(StopIteration, (const byte*)"\xea\x1c\x0d\x00" "StopIteration")
Q(BaseException, (const byte*)"\x07\x92\x0d\x00" "BaseException")
Q(ArithmeticError, (const byte*)"\x2d\x8c\x0f\x00" "ArithmeticError")
Q(AssertionError, (const byte*)"\x97\x5a\x0e\x00" "AssertionError")
Q(AttributeError, (const byte*)"\x21\xde\x0e\x00" "AttributeError")
Q(BufferError, (const byte*)"\x1d\x59\x0b\x00" "BufferError")
Q(EOFError, (const byte*)"\x91\xbf\x08\x00" "EOFError")
Q(Exception, (const byte*)"\xf2\x29\x09\x00" "Exception")
Q(FileExistsError, (const byte*)"\x5b\x14\x0f\x00" "FileExistsError")
Q(FileNotFoundError, (const byte*)"\x78\x89\x11\x00" "FileNotFoundError")
Q(FloatingPointError, (const byte*)"\x01\x34\x12\x00" "FloatingPointError")
Q(GeneratorExit, (const byte*)"\x16\x62\x0d\x00" "GeneratorExit")
Q(IOError, (const byte*)"\xbb\xc4\x07\x00" "IOError")
Q(ImportError, (const byte*)"\x20\x9c\x0b\x00" "ImportError")
Q(IndentationError, (const byte*)"\x5c\x20\x10\x00" "IndentationError")
Q(IndexError, (const byte*)"\x83\xad\x0a\x00" "IndexError")
Q(KeyError, (const byte*)"\xea\x00\x08\x00" "KeyError")
Q(LookupError, (const byte*)"\xff\x69\x0b\x00" "LookupError")
Q(MemoryError, (const byte*)"\xdc\x83\x0b\x00" "MemoryError")
Q(NameError, (const byte*)"\xba\x2d\x09\x00" "NameError")
Q(NotImplementedError, (const byte*)"\xc6\x98\x13\x00" "NotImplementedError")
Q(OSError, (const byte*)"\xa1\x65\x07\x00" "OSError")
Q(OverflowError, (const byte*)"\x81\xe1\x0d\x00" "OverflowError")
Q(RuntimeError, (const byte*)"\x61\xf1\x0c\x00" "RuntimeError")
Q(SyntaxError, (const byte*)"\x94\x8f\x0b\x00" "SyntaxError")
Q(SystemError, (const byte*)"\xf8\x5d\x0b\x00" "SystemError")
Q(TypeError, (const byte*)"\x25\x96\x09\x00" "TypeError")
Q(UnboundLocalError, (const byte*)"\x99\x22\x11\x00" "UnboundLocalError")
Q(ValueError, (const byte*)"\x96\x87\x0a\x00" "ValueError")
Q(ZeroDivisionError, (const byte*)"\xb6\x27\x11\x00" "ZeroDivisionError")
Q(None, (const byte*)"\x6f\xd1\x04\x00" "None")
Q(False, (const byte*)"\x38\x6f\x05\x00" "False")
Q(True, (const byte*)"\x13\x17\x04\x00" "True")
Q(object, (const byte*)"\x90\x8d\x06\x00" "object")
Q(NoneType, (const byte*)"\x17\x68\x08\x00" "NoneType")
Q(abs, (const byte*)"\x95\x32\x03\x00" "abs")
Q(all, (const byte*)"\x44\x33\x03\x00" "all")
Q(any, (const byte*)"\x13\x33\x03\x00" "any")
Q(args, (const byte*)"\xc2\xc6\x04\x00" "args")
Q(array, (const byte*)"\x7c\x72\x05\x00" "array")
Q(bool, (const byte*)"\xeb\x3c\x04\x00" "bool")
Q(bytearray, (const byte*)"\x76\xa3\x09\x00" "bytearray")
Q(bytes, (const byte*)"\x5c\xb2\x05\x00" "bytes")
Q(callable, (const byte*)"\x0d\x70\x08\x00" "callable")
Q(chr, (const byte*)"\xdc\x4c\x03\x00" "chr")
Q(classmethod, (const byte*)"\xb4\x8c\x0b\x00" "classmethod")
Q(collections, (const byte*)"\xe0\xc8\x0b\x00" "collections")
Q(complex, (const byte*)"\xc5\x9d\x07\x00" "complex")
Q(dict, (const byte*)"\x3f\xfc\x04\x00" "dict")
Q(dir, (const byte*)"\xfa\x1e\x03\x00" "dir")
Q(divmod, (const byte*)"\xb8\x04\x06\x00" "divmod")
Q(enumerate, (const byte*)"\x71\xba\x09\x00" "enumerate")
Q(eval, (const byte*)"\x9b\xa6\x04\x00" "eval")
Q(exec, (const byte*)"\x1e\xc0\x04\x00" "exec")
Q(filter, (const byte*)"\x25\xbe\x06\x00" "filter")
Q(float, (const byte*)"\x35\x44\x05\x00" "float")
Q(hash, (const byte*)"\xb7\x70\x04\x00" "hash")
Q(id, (const byte*)"\x28\x6f\x02\x00" "id")
Q(int, (const byte*)"\x16\x53\x03\x00" "int")
Q(isinstance, (const byte*)"\xb6\xbe\x0a\x00" "isinstance")
Q(issubclass, (const byte*)"\xb5\x7f\x0a\x00" "issubclass")
Q(iter, (const byte*)"\x8f\x21\x04\x00" "iter")
Q(len, (const byte*)"\x62\x40\x03\x00" "len")
Q(list, (const byte*)"\x27\x1d\x04\x00" "list")
Q(map, (const byte*)"\xb9\x43\x03\x00" "map")
Q(max, (const byte*)"\xb1\x43\x03\x00" "max")
Q(min, (const byte*)"\xaf\x42\x03\x00" "min")
Q(namedtuple, (const byte*)"\x1e\x16\x0a\x00" "namedtuple")
Q(next, (const byte*)"\x42\x88\x04\x00" "next")
Q(ord, (const byte*)"\x1c\x5e\x03\x00" "ord")
Q(path, (const byte*)"\x88\xce\x04\x00" "path")
Q(pow, (const byte*)"\x2d\x73\x03\x00" "pow")
Q(print, (const byte*)"\x54\xc6\x05\x00" "print")
Q(range, (const byte*)"\x1a\x5e\x05\x00" "range")
Q(repr, (const byte*)"\xd0\xf7\x04\x00" "repr")
Q(set, (const byte*)"\x27\x8f\x03\x00" "set")
Q(sorted, (const byte*)"\x5e\x15\x06\x00" "sorted")
Q(staticmethod, (const byte*)"\x62\xaf\x0c\x00" "staticmethod")
Q(sum, (const byte*)"\x2e\x8d\x03\x00" "sum")
Q(super, (const byte*)"\xc4\xb2\x05\x00" "super")
Q(str, (const byte*)"\x50\x8d\x03\x00" "str")
Q(sys, (const byte*)"\xbc\x8e\x03\x00" "sys")
Q(tuple, (const byte*)"\xfd\x41\x05\x00" "tuple")
Q(type, (const byte*)"\x9d\x7f\x04\x00" "type")
Q(value, (const byte*)"\x4e\x34\x05\x00" "value")
Q(zip, (const byte*)"\xe6\xac\x03\x00" "zip")
Q(append, (const byte*)"\x6b\x97\x06\x00" "append")
Q(pop, (const byte*)"\x2a\x73\x03\x00" "pop")
Q(sort, (const byte*)"\xbf\x9d\x04\x00" "sort")
Q(join, (const byte*)"\xa7\x5c\x04\x00" "join")
Q(strip, (const byte*)"\x29\x1e\x05\x00" "strip")
Q(format, (const byte*)"\x26\x33\x06\x00" "format")
Q(key, (const byte*)"\x32\x6d\x03\x00" "key")
Q(reverse, (const byte*)"\x25\x2a\x07\x00" "reverse")
Q(bound_method, (const byte*)"\x97\xa2\x0c\x00" "bound_method")
Q(closure, (const byte*)"\x74\xca\x07\x00" "closure")
Q(dict_view, (const byte*)"\x2d\xa9\x09\x00" "dict_view")
Q(function, (const byte*)"\x27\x02\x08\x00" "function")
Q(generator, (const byte*)"\x96\xc3\x09\x00" "generator")
Q(iterator, (const byte*)"\x47\xbe\x08\x00" "iterator")
Q(module, (const byte*)"\xbf\x99\x06\x00" "module")
Q(slice, (const byte*)"\xb5\xf4\x05\x00" "slice")
Q(math, (const byte*)"\x35\xbb\x04\x00" "math")
Q(e, (const byte*)"\xc0\xb5\x01\x00" "e")
Q(pi, (const byte*)"\x1c\x70\x02\x00" "pi")
Q(sqrt, (const byte*)"\x21\x44\x04\x00" "sqrt")
Q(exp, (const byte*)"\xc8\x24\x03\x00" "exp")
Q(expm1, (const byte*)"\x74\x72\x05\x00" "expm1")
Q(log, (const byte*)"\x21\x3f\x03\x00" "log")
Q(log2, (const byte*)"\x73\x23\x04\x00" "log2")
Q(log10, (const byte*)"\x40\x91\x05\x00" "log10")
Q(cosh, (const byte*)"\xd2\xdb\x04\x00" "cosh")
Q(sinh, (const byte*)"\xb9\xa6\x04\x00" "sinh")
Q(tanh, (const byte*)"\xd6\xa1\x04\x00" "tanh")
Q(acosh, (const byte*)"\x13\xa3\x05\x00" "acosh")
Q(asinh, (const byte*)"\x38\x8f\x05\x00" "asinh")
Q(atanh, (const byte*)"\x97\x81\x05\x00" "atanh")
Q(cos, (const byte*)"\x7a\x4c\x03\x00" "cos")
Q(sin, (const byte*)"\xb1\x90\x03\x00" "sin")
Q(tan, (const byte*)"\xfe\x61\x03\x00" "tan")
Q(acos, (const byte*)"\x1b\xa0\x04\x00" "acos")
Q(asin, (const byte*)"\x50\xe5\x04\x00" "asin")
Q(atan, (const byte*)"\x1f\xbe\x04\x00" "atan")
Q(atan2, (const byte*)"\xcd\x81\x05\x00" "atan2")
Q(ceil, (const byte*)"\x06\xb0\x04\x00" "ceil")
Q(copysign, (const byte*)"\x33\x14\x08\x00" "copysign")
Q(fabs, (const byte*)"\x93\x12\x04\x00" "fabs")
Q(fmod, (const byte*)"\xe5\x44\x04\x00" "fmod")
Q(floor, (const byte*)"\x7d\x46\x05\x00" "floor")
Q(isfinite, (const byte*)"\xa6\xab\x08\x00" "isfinite")
Q(isinf, (const byte*)"\x3e\x11\x05\x00" "isinf")
Q(isnan, (const byte*)"\x9e\x03\x05\x00" "isnan")
Q(trunc, (const byte*)"\x5b\x99\x05\x00" "trunc")
Q(modf, (const byte*)"\x25\xc0\x04\x00" "modf")
Q(frexp, (const byte*)"\x1c\x98\x05\x00" "frexp")
Q(ldexp, (const byte*)"\x40\x6f\x05\x00" "ldexp")
Q(degrees, (const byte*)"\x02\x41\x07\x00" "degrees")
Q(radians, (const byte*)"\x87\x3f\x07\x00" "radians")
Q(erf, (const byte*)"\x94\x23\x03\x00" "erf")
Q(erfc, (const byte*)"\x77\x96\x04\x00" "erfc")
Q(gamma, (const byte*)"\x02\x90\x05\x00" "gamma")
Q(lgamma, (const byte*)"\xce\x6c\x06\x00" "lgamma")
Q(mem_total, (const byte*)"\xfd\x6a\x09\x00" "mem_total")
Q(mem_current, (const byte*)"\x16\xba\x0b\x00" "mem_current")
Q(mem_peak, (const byte*)"\x40\x25\x08\x00" "mem_peak")
Q(_lt_module_gt_, (const byte*)"\xbd\x94\x08\x00" "<module>")
Q(_lt_lambda_gt_, (const byte*)"\x80\x8c\x08\x00" "<lambda>")
Q(_lt_listcomp_gt_, (const byte*)"\xd4\x15\x0a\x00" "<listcomp>")
Q(_lt_dictcomp_gt_, (const byte*)"\xcc\x8d\x0a\x00" "<dictcomp>")
Q(_lt_setcomp_gt_, (const byte*)"\x54\x51\x09\x00" "<setcomp>")
Q(_lt_genexpr_gt_, (const byte*)"\x34\x6a\x09\x00" "<genexpr>")
Q(_lt_string_gt_, (const byte*)"\x52\x53\x08\x00" "<string>")
Q(_lt_stdin_gt_, (const byte*)"\xe3\x63\x07\x00" "<stdin>")
Q(help, (const byte*)"\x94\x5c\x04\x00" "help")
Q(pyb, (const byte*)"\xee\x71\x03\x00" "pyb")
Q(info, (const byte*)"\xeb\xb3\x04\x00" "info")
Q(sd_test, (const byte*)"\x9b\x4d\x07\x00" "sd_test")
Q(stop, (const byte*)"\x9d\x36\x04\x00" "stop")
Q(standby, (const byte*)"\xd2\xd9\x07\x00" "standby")
Q(source_dir, (const byte*)"\xd8\x4e\x0a\x00" "source_dir")
Q(main, (const byte*)"\xce\xb7\x04\x00" "main")
Q(sync, (const byte*)"\xa2\x62\x04\x00" "sync")
Q(gc, (const byte*)"\x61\x6e\x02\x00" "gc")
Q(repl_info, (const byte*)"\xbf\x37\x09\x00" "repl_info")
Q(delay, (const byte*)"\x50\x4c\x05\x00" "delay")
Q(udelay, (const byte*)"\x25\xaf\x06\x00" "udelay")
Q(switch, (const byte*)"\xb7\x3d\x06\x00" "switch")
Q(SW, (const byte*)"\xe1\x74\x02\x00" "SW")
Q(servo, (const byte*)"\x78\xda\x05\x00" "servo")
Q(pwm, (const byte*)"\x2f\x70\x03\x00" "pwm")
Q(accel, (const byte*)"\xcd\x8f\x05\x00" "accel")
Q(accel_read, (const byte*)"\x80\x08\x0a\x00" "accel_read")
Q(accel_mode, (const byte*)"\x11\x83\x0a\x00" "accel_mode")
Q(hid, (const byte*)"\xe0\x4f\x03\x00" "hid")
Q(time, (const byte*)"\xf0\xc1\x04\x00" "time")
Q(rand, (const byte*)"\x9c\x0a\x04\x00" "rand")
Q(Led, (const byte*)"\x88\xe0\x03\x00" "Led")
Q(LCD, (const byte*)"\xce\xdc\x03\x00" "LCD")
Q(Servo, (const byte*)"\x98\xd9\x05\x00" "Servo")
Q(SD, (const byte*)"\xf2\x74\x02\x00" "SD")
Q(SDcard, (const byte*)"\xc6\x0b\x06\x00" "SDcard")
Q(I2C, (const byte*)"\x5d\xdf\x03\x00" "I2C")
Q(gpio, (const byte*)"\x54\xd8\x04\x00" "gpio")
Q(gpio_in, (const byte*)"\xac\xa3\x07\x00" "gpio_in")
Q(gpio_out, (const byte*)"\xe5\x32\x08\x00" "gpio_out")
Q(Usart, (const byte*)"\xc4\xc9\x05\x00" "Usart")
Q(ADC, (const byte*)"\x63\xb6\x03\x00" "ADC")
Q(ADC_all, (const byte*)"\xfd\x74\x07\x00" "ADC_all")
Q(Audio, (const byte*)"\x73\x12\x05\x00" "Audio")
Q(open, (const byte*)"\xd1\x3a\x04\x00" "open")
Q(File, (const byte*)"\xa3\x97\x04\x00" "File")
Q(0_colon__slash_, (const byte*)"\xc0\x69\x03\x00" "0:/")
Q(0_colon__slash_src, (const byte*)"\xe2\xe4\x06\x00" "0:/src")
Q(0_colon__slash_lib, (const byte*)"\x87\xbf\x06\x00" "0:/lib")
Q(Pin, (const byte*)"\x12\x14\x03\x00" "Pin")
Q(PinMap, (const byte*)"\x2e\x8d\x06\x00" "PinMap")
Q(PinAF, (const byte*)"\x35\x58\x05\x00" "PinAF")
Q(PinNamed, (const byte*)"\x51\xca\x08\x00" "PinNamed")
Q(Exti, (const byte*)"\x05\x42\x04\x00" "Exti")
Q(ExtiMeta, (const byte*)"\x18\xfc\x08\x00" "ExtiMeta")
Q(rtc_info, (const byte*)"\x71\x1a\x08\x00" "rtc_info")
Q(millis, (const byte*)"\x5b\x21\x06\x00" "millis")
Q(PULL_NONE, (const byte*)"\x55\xb5\x09\x00" "PULL_NONE")
Q(PULL_UP, (const byte*)"\xba\x5e\x07\x00" "PULL_UP")
Q(PULL_DOWN, (const byte*)"\xad\xfb\x09\x00" "PULL_DOWN")
Q(PUSH_PULL, (const byte*)"\x81\x5e\x09\x00" "PUSH_PULL")
Q(OPEN_DRAIN, (const byte*)"\x5e\x48\x0a\x00" "OPEN_DRAIN")
Q(led, (const byte*)"\x68\x40\x03\x00" "led")
Q(RED, (const byte*)"\x96\x06\x03\x00" "RED")
Q(GREEN, (const byte*)"\xde\x98\x05\x00" "GREEN")
Q(BLUE, (const byte*)"\x3b\x3b\x04\x00" "BLUE")
Q(on, (const byte*)"\x64\x6f\x02\x00" "on")
Q(off, (const byte*)"\x8a\x5c\x03\x00" "off")
Q(toggle, (const byte*)"\xb7\x43\x06\x00" "toggle")
Q(Image, (const byte*)"\x62\xa0\x05\x00" "Image")
Q(Imlib, (const byte*)"\x66\xcd\x05\x00" "Imlib")
Q(Sensor, (const byte*)"\x33\xd0\x06\x00" "Sensor")
Q(Cascade, (const byte*)"\xf7\x46\x07\x00" "Cascade")
Q(Clock, (const byte*)"\x4d\x86\x05\x00" "Clock")
